{
  "name": "ugly-adapter",
  "version": "1.3.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/greim/ugly-adapter"
  },
  "bugs": {
    "url": "https://github.com/greim/ugly-adapter/issues"
  },
  "description": "get promises out of standard callback APIs",
  "main": "index.js",
  "scripts": {
    "test": "mocha --compilers js:babel/register"
  },
  "keywords": [
    "promise",
    "callback",
    "es6",
    "es2015",
    "es7",
    "es2016",
    "yield",
    "thenable",
    "yieldable",
    "thunk",
    "async",
    "await",
    "promisify",
    "promify"
  ],
  "author": {
    "name": "gregreimer@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "any-promise": "^1.0.0"
  },
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-eslint": "^5.0.0-beta6",
    "bluebird": "^2.9.12",
    "mocha": "^2.1.0",
    "numeral": "^1.5.3"
  },
  "readme": "# Universal Callback => Promise Adapter\n\nWith [Koa](http://koajs.com/) and [ES7 async functions](https://jakearchibald.com/2014/es7-async-functions/) gaining prominence, the JavaScript world is poised to transition to promises.\nThat means we need a sane way to *promisify* callback-based APIs.\nRather than importing lots of different promisification wrappers for each API, this lib provides a single way to promisify every API.\n\n## Install\n\n```bash\nnpm install ugly-adapter\n```\n\n## Use\n\n```js\nimport adapt from 'ugly-adapter';\n...\nvar data = await adapt(fs.readFile, './data.txt', 'utf8');\n```\n\nThis lib also exposes methods to make partial application easier.\nWhich is useful if you want to re-use an adapted version of a function.\n\n```js\nvar read = adapt.part(fs.readFile);\nvar data1 = await read('./data1', 'utf8');\nvar data2 = await read('./data2', 'utf8');\n```\n\n# API\n\n## Call a bare function: `adapt()`\n\nUseful when you don't think a function cares about `this`.\n\n```js\n// signature\nvar promise = adapt(<function>, ...args)\n\n// fs.readFile(path, enc, callback) example\nadapt(fs.readFile, './data.txt', 'utf8').then(...)\n```\n\n## Call a method on an object: `adapt.method()`\n\nUseful when you think a function definitely cares about `this`.\n\n```js\n// signature\nvar promise = adapt.method(<object>, <string>, ...args)\n\n// user.authenticate(opts, callback) example\nvar user = new User()\nadapt.method(user, 'authenticate', {\n  userName: userName,\n  password: password\n}).then(...)\n```\n\n## Partially apply a bare function: `adapt.part()`\n\n```js\n// signature\nvar fn = adapt.part(<function>, ...args)\n\n// example\nvar stat = adapt.part(fs.stat, './data.txt', 'utf8')\nstat().then(...)\n```\n\n## Partially apply a method on an object: `adapt.method.part()`\n\n```js\n// signature\nvar fn = adapt.method.part(<object>, <string>, ...args)\n\n// example\nvar user = new User()\nvar authenticate = adapt.method.part(user, 'authenticate')\nauthenticate({\n  userName: userName,\n  password: password\n}).then(...)\n```\n\nA note about partial application.\nYou can basically move the `)(` around willy-nilly.\n\n```js\n// these behave identically\nvar promise = adapt.part(a,b,c)()\nvar promise = adapt.part(a,b)(c)\nvar promise = adapt.part(a)(b,c)\nvar promise = adapt.part()(a,b,c)\n```\n\n## Promify a library: `adapt.promify(lib)`\n\nYou can promisify entire library modules, such as `fs`.\nIt will return an object with all the same properties and functions.\nThe functions have the same signature—sans callback—and return promises.\n\n```js\nvar adapt = require('ugly-adapter')\n  , callbackFs = require('fs')\n  , fs = adapt.promify(callbackFs);\n\nfs.stat(...).then(...);\n```\n\nThe above promifies every function in the `fs` module.\nIf you only want to promify a subset of functions, declare them in a whitelist.\n\n```js\nvar adapt = require('ugly-adapter')\n  , callbackFs = require('fs')\n  , fs = adapt.promify(callbackFs, 'stat', 'readFile');\n\nfs.stat(...).then(...);\nfs.readFile(...).then(...);\nfs.link(...).then(...); // error, wasn't in the whitelist!\n```\n\n# Async/Await Example\n\nNow that we can convert callbacks to promises, we can write async functions everywhere.\n\n```js\nasync function jsonReadFile(path, encoding) {\n  let data = await adapt(fs.readFile, encoding);\n  data = JSON.parse(data);\n  return data;\n}\n```\n\n# Any Promise\n\nUgly adapter uses [any-promise](https://github.com/kevinbeaty/any-promise) promises. This is something you can safely ignore and everything works normally. However, if you want to polyfill/replace your environment's Promise for whatever reason, this allows you swap in whatever conforming Promise you want and this library will use it.\n",
  "readmeFilename": "readme.md",
  "homepage": "https://github.com/greim/ugly-adapter",
  "_id": "ugly-adapter@1.3.1",
  "_shasum": "01ee5ee0773c60e76579420f268b7b9e34e7a89a",
  "_from": "ugly-adapter@^1.1.0",
  "_resolved": "https://registry.npmjs.org/ugly-adapter/-/ugly-adapter-1.3.1.tgz"
}
